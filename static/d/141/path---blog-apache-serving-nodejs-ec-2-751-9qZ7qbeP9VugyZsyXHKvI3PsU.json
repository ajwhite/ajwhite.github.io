{"data":{"markdownRemark":{"html":"<p>Most people are fine just loading up their NodeJS server by a quick localhost:8080 request, but sometimes it's also useful to have an actual hostname available, especially when you're integrating with OAuth services that may require a qualified domain name for their redirect url. In this event, we need a way to tie Apache and Node together. Luckily it's easy.</p>\n<p>Let's assume we have a node application running on <code>:4567</code>\n{% highlight javascript %}\nvar http = require('http'),\nserver = http.createServer(function (request, response) {\nresponse.writeHead(200, {'Content-Type': 'text/plain'});\nresponse.end('Hello World\\n');\n});</p>\n<p>server.listen(4567);\n{% endhighlight %}</p>\n<p>We can successfully load up <code>localhost:4567</code>, but now we'd like to tie it up to be proxied by a hostname, say <code>local.example.com:80</code></p>\n<p>A typical Apache configuration would normally look like this, for serving your standard web directory\n{% highlight html %}\n&#x3C;VirtualHost *:80>\nServerName   local.example.com\nDocumentRoot \"/var/www/html/com.example.local\"\nErrorLog     \"/var/log/httpd/com.example.local-error<em>log\"\nCustomLog    \"/var/log/httpd/com.example.local-access</em>log\" common</p>\n<p>  &#x3C;Directory \"/var/www/html/com.example.local\">\nAllowOverride All\nOrder allow,deny\nAllow from all\n</Directory><br>\n</VirtualHost>\n{% endhighlight %}</p>\n<p>That should look pretty familiar to anyone who's spawned up a couple apache servers before. This would allow us to hit <code>local.example.com</code>, granted we stuff that into our <code>/etc/hosts</code>, and be served whatever is in our <code>/var/www/html/com.example.local</code> directory.</p>\n<p>For anyone following along hands on, for this to work, make sure you edit your <code>/etc/hosts</code> file (sudo required) and enter:</p>\n<p>{% highlight text %}\n127.0.0.1   local.example.com\n{% endhighlight %}</p>\n<p>This is required for the <code>local.example.com</code> hostname to resolve to our local machine. Moving forward, here's the changes we'll want to make so that our Apache server will, instead of serving a directory, proxy requests into our node application:</p>\n<p>{% highlight html %}\n&#x3C;VirtualHost *:80>\nServerName local.example.com\nErrorLog   \"/var/log/httpd/com.example.local-error<em>log\"\nCustomLog  \"/var/log/httpd/com.example.local-access</em>log\" common</p>\n<h2>Here's our magic</h2>\n<p>  ProxyRequests off</p>\n<p>  &#x3C;Proxy *>\nOrder deny,allow\nAllow from all\n</Proxy></p>\n<p>  <Location /> # no, this closing tag is not a typo\nProxyPass        <a href=\"http://localhost:4567\">http://localhost:4567</a> # Our port goes here\nProxyPassReverse <a href=\"http://localhost:4567\">http://localhost:4567</a>\n</Location>\n</VirtualHost>\n{% endhighlight %}</p>\n<p>Now you will be able to successfully load your node application from <code>http://localhost:4567</code> over <code>http://local.example.com</code></p>","frontmatter":{"date":"2014-10-17 15:37:00","permalink":"/blog/apache-serving-nodejs","title":"Configuring Apache to Serve your NodeJS Application"}}},"pageContext":{}}