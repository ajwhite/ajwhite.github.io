{"data":{"markdownRemark":{"html":"<h1>Slackify</h1>\n<h3>Because keyboards are better than mice.</h3>\n<p><img src=\"https://cloud.githubusercontent.com/assets/656630/13386068/3d2d1bd4-de76-11e5-9687-bc76a32ee96b.gif\"\n  alt=\"Slackify\"\n  style=\"width:100%; max-width: 100%; max-height: none;\" /></p>\n<p><a href=\"https://github.com/ajwhite/slackify\" target=\"_blank\" title=\"Slackify - Upload files with NodeJS to Slack from the CLI\">Slackify</a> is a command line tool for uploading files from your workspace, or piping standard input, to Slack. I've found myself frequently doing these things by hand. Whether it was copying console output, or dragging files, as a developer I don't want to deal with the GUI when what I want to share is right there in the console. If I can just pipe my output into Slack, I'll be happy for the day.</p>\n<h1>Bringing Slack to the CLI</h1>\n<p>You've got a file, <code>filename</code>, and you want to share it on channel, <code>channelname</code>.</p>\n<p><code>slackify filename channelname</code></p>\n<p>Piping output from other calls to Slack is just as easy.</p>\n<p><code>ps -a | slackify channelname</code></p>\n<p>This will take the output from <code>ps</code> (process status) and share it on Slack as a snippet.</p>\n<h1>Get Started</h1>\n<p>To use Slackify, we'll need to do three things:</p>\n<ol>\n<li>Install Slackify globally</li>\n<li>Create an access token</li>\n<li>Add the access token to an environment variable (optional)</li>\n</ol>\n<h2>Installing Slackify</h2>\n<p>Slackify is an <a href=\"https://www.npmjs.com/package/slackify\" target=\"_blank\" title=\"Slackify on NPM\">npm</a> module. Install Slackify globally by <code>npm install -g slackify</code>.</p>\n<p>You'll then be able to access it from the CLI, <code>slackify --version</code>.</p>\n<h2>Create an Access Token</h2>\n<p>Slackify needs a way to communicate to your Slack team. It uses an access token to utilize Slack's <a href=\"https://api.slack.com/methods/files.upload\">file upload</a> API.</p>\n<p>The easiest way to get an access token is from their developer token generator <a href=\"https://api.slack.com/docs/oauth-test-tokens\">https://api.slack.com/docs/oauth-test-tokens</a>.</p>\n<img src=\"/dist/images/blog/slackify/generate-slack-token.png\" alt=\"Generate a Slack developer token\" />\n<p>Choose the team you want to use Slackify with and hit \"Create token\". <em>You can also create a Bot user at yourorganization.slack.com/services/new/bot</em>.</p>\n<h2>Environment Variables</h2>\n<p>Now that you have your token, you'll set up an <a href=\"https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps#creating-environmental-variables\" title=\"Creating environmental variables\" target=\"_blank\">environment variable</a>. Add the following to your <code>.bashrc</code> (or whatever dotfile file you use):</p>\n<p><code>export SLACKIFY_TOKEN=xxxx-xxxxxxx-xxxxxxx-xxxxxx-xxxxxx</code></p>\n<p>To make sure this environment variable is active, source your dotfile <code>source ~/.bashrc</code>.</p>\n<p>If you'd like to avoid using an environment variable, you can use the <code>--token</code> flag</p>\n<p><code>slackify filename channelname --token xxxx-xxxxxxx-xxxxxxx-xxxxxx-xxxxxx</code></p>\n<p>Now you're ready to start piping content to Slack!</p>\n<h1>Using Slackify</h1>\n<p>Let's take a look at some of the things you can do with <code>slackify</code>.</p>\n<p>{% highlight sh %}</p>\n<blockquote>\n<p>slackify --help</p>\n</blockquote>\n<p>  Usage: slackify [options][file] [channel]</p>\n<p>  Options:</p>\n<pre><code>-h, --help              output usage information\n-V, --version           output the version number\n-m --message &#x3C;message>  a comment to add to the file\n-u --user &#x3C;user>        the user to send the file to\n-l --lines &#x3C;l1>..&#x3C;l2>   upload specific lines in a file\n-t --token &#x3C;token>      slack token\n-tl --tail &#x3C;tail>       tail of a file\n</code></pre>\n<p>{% endhighlight %}</p>\n<h2>Channels and Users</h2>\n<p>Slackify is setup to make uploading content to channels easy. However, you can send content to a user by specifying the <code>-u</code> or <code>--user</code> flag.</p>\n<p><code>slackify filename -u username</code></p>\n<p>If you want to send to a channel, you just use the second argument <code>slackify filename channelname</code>.</p>\n<h2>File splitting</h2>\n<p>Sending an entire file can sometimes be unnecessary, or even a burden if it's large enough. <code>--lines</code> and <code>--tail</code> flags can help here.</p>\n<p><code>slackify --lines 10..20 filename channelname</code> will send lines <code>10</code> through <code>20</code> from the file to Slack.</p>\n<p><code>slackify --tail 50 filename channelname</code> will send the last <code>50</code> lines of a file to Slack. This is especially useful for log files.</p>\n<h2>Comments</h2>\n<p>A comment be added to the uploaded file with the <code>--message</code> or <code>-m</code> flag.</p>\n<p><code>slackify filename -m 'my comment'</code></p>\n<h1>Piping Standard Input</h1>\n<p>My favorite feature of Slackify. Every now and then I'll get a question from someone on the team why their build script failed (ahem, <a href=\"https://twitter.com/ghanbak\" target=\"_blank\" title=\"Ethan Macdonald on Twitter\">@ghanbak</a>). It's usually because of a missing dependency or something trivial, but it always helps to see their output. Say the problem occurred when running <code>gulp build</code>. I can now ask my team member to simply run <code>gulp build | slackify -u atticus</code>, and I'll see the output they received. Simple.</p>\n<div>\n  <img src=\"/dist/images/blog/slackify/slackify-stdin.png\"\n    alt=\"Slackify Terminal\"\n    style=\"display:inline;\" />\n  <img src=\"/dist/images/blog/slackify/slackify-stdin-slack.png\"\n    alt=\"Slackify to Slack\"\n    style=\"display:inline;\" />\n</div>\n<p>If Slackify is something you'd like to install or contribute to, you can find it on <a href=\"https://github.com/ajwhite/slackify\" target=\"_blank\" title=\"Slackify on Github\">github.com/ajwhite/slackify</a>.</p>","frontmatter":{"date":"2016-02-28 20:00:00","permalink":"/blog/node-slackify-cli","title":"Slackify - Upload files from the CLI with Node JS to Slack"}}},"pageContext":{}}