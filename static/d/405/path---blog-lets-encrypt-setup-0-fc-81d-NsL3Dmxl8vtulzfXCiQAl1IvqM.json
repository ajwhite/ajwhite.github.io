{"data":{"markdownRemark":{"html":"<p>Let's Encrypt has opened the floodgates of their public beta today, December 4th 2015. Today marks a milestone towards encrypting the web. In this post we'll look at how to use this new tool to generate a free SSL certificate.</p>\n<img src=\"/dist/images/blog/lets-encrypt-setup/encrypted.png\" alt=\"SSL activated\" />\n<p>This article assumes you have a web server and Apache. You're also going to want to have two SSH windows open, as the generator will have a few prompts and instructions to set up verification.</p>\n<p>The workflow is broken into 3 segments:</p>\n<ol>\n<li>Choosing a domain to create a certificate for</li>\n<li>Verifying the domain</li>\n<li>Configuring Apache to serve your site over SSL</li>\n</ol>\n<h2>Installing the <code>letsencrypt</code> CLI tool</h2>\n<p><code>ssh</code> into your server and clone the <code>letsencrypt</code> repository in your home directory and navigate into it.</p>\n<p>{%highlight shell-session %}\ngit clone git@github.com:letsencrypt/letsencrypt.git\ncd letsencrypt\n{% endhighlight %}</p>\n<h2>Requesting a certificate</h2>\n<p>In the cloned repository exists a script <code>letsencrypt-auto</code>. This typically will automatically generate a certificate and configure your web server. I tend to lean towards manually doing things, especially in beta. That turned out to be a good thing since it indeed failed for me <a href=\"https://github.com/letsencrypt/letsencrypt/issues/1712\" title=\"Error installing Apache2 certificates\" target=\"_blank\">letsencrypt#1712</a></p>\n<p>We'll go ahead and start the manual flow</p>\n<p>{% highlight \tshell-session %}\n./letsencrypt certonly --manual\n{% endhighlight %}</p>\n<p>If this is the first time running the command, it will go ahead and download all the necessary packages. Let it run for a minute while it does that. You'll next be prompted to type in your <code>sudo</code> password.</p>\n<p>Upon allowing root access, you'll enter a GUI flow of providing the domain(s) you'd like to generate certificates for</p>\n<img src=\"/dist/images/blog/lets-encrypt-setup/domain-entry.png\" alt=\"enter a domain\" />\n<p>This will next let you know that your IP will be publicly logged. Agree, if you're cool with that.</p>\n<h2>Verifying your domain</h2>\n<p>Upon providing your domain name and agreeing that your IP will be logged, you'll now set up the verification. Here you'll want to open a <strong>new</strong> <code>ssh</code> window. This message is a prompt waiting for you to hit <code>ENTER</code> to confirm that you've set things up, so we'll leave this prompt as it is for now.</p>\n<p>You should see output similar to</p>\n<p>{% highlight \tshell-session %}\nMake sure your web server displays the following content at\n<a href=\"http://atticuswhite.com/.well-known/acme-challenge/THE_VERIFICATION_FILE\">http://atticuswhite.com/.well-known/acme-challenge/THE<em>VERIFICATION</em>FILE</a> before continuing:</p>\n<p>THE<em>VERIFICATION</em>STRING</p>\n<p>If you don't have HTTP server configured, you can run the following\ncommand on the target server (as root):</p>\n<p>mkdir -p /tmp/letsencrypt/public<em>html/.well-known/acme-challenge\ncd /tmp/letsencrypt/public</em>html\nprintf \"%s\" THE<em>VERIFICATION</em>STRING > .well-known/acme-challenge/THE<em>VERIFICATION</em>FILE</p>\n<h1>run only once per server:</h1>\n<p>$(command -v python2 || command -v python2.7 || command -v python2.6) -c <br>\n\"import BaseHTTPServer, SimpleHTTPServer; <br>\ns = BaseHTTPServer.HTTPServer(('', 80), SimpleHTTPServer.SimpleHTTPRequestHandler); <br>\ns.serve_forever()\"\nPress ENTER to continue\n{% endhighlight %}</p>\n<p>To summarize, you're going to create a file in your served directory that will be used to verify that you indeed own the location that the domain serves. This article assumes you're setting up an Apache server. If you have yet to set up a served directory, do that now. If you already have a directory that is serving your domain, navigate to that directory and create the following file path:</p>\n<p><code>.well-known/acme-challenge/THE_VERIFICATION_FILE</code> (ofcourse, <code>THE_VERIFICATION_FILE</code> should be what's described in the message from <code>letsencrypt-auto</code>)</p>\n<p>Next you'll want put the verification string into the file.</p>\n<p>{% highlight shell-session %}\ncd /path/to/webserver/directory\nmkdir -p .well-known/acme-challenge/THE<em>VERIFICATION</em>FILE\nprintf \"%s\" THE<em>VERIFICATION</em>STRING > .well-known/acme-challenge/THE<em>VERIFICATION</em>FILE\n{% endhighlight %}</p>\n<p>Verify that this file is properly being served before continuing. Navigate to <a href=\"http://your-domain.com/.well-known/acme-challenge/THE_VERIFICATION_FILE\">http://your-domain.com/.well-known/acme-challenge/THE<em>VERIFICATION</em>FILE</a> and make sure it's outputting the verification string.</p>\n<p>Once you have this confirmed, go back to your other <code>ssh</code> window and confirm the prompt by hitting <code>ENTER</code>.</p>\n<p>If verification was successful, you should receive a confirmation message containing the location of your certificate, chain, and private key file:</p>\n<p>{% highlight text %}\nIMPORTANT NOTES:</p>\n<ul>\n<li>\n<p>Congratulations! Your certificate and chain have been saved at\n/etc/letsencrypt/live/your-domain.com/fullchain.pem. Your cert\nwill expire on 2016-03-03. To obtain a new version of the\ncertificate in the future, simply run Let's Encrypt again.</p>\n</li>\n<li>\n<p>If like Let's Encrypt, please consider supporting our work by:</p>\n<p>Donating to ISRG / Let's Encrypt:   <a href=\"https://letsencrypt.org/donate\">https://letsencrypt.org/donate</a>\nDonating to EFF:                    <a href=\"https://eff.org/donate-le\">https://eff.org/donate-le</a>\n{% endhighlight %}</p>\n</li>\n</ul>\n<p>Awesome! Now let's setup that cert.</p>\n<h2>Configuring the certificates</h2>\n<p>Head over to your Apache configuration directory. Depending on what version of Apache you're running (Apache or Apache2) these next steps may vary. The overall configuration is the same in the end, however the directory structures are a bit different between the two.</p>\n<p>{% highlight shell-session %}\ncd /etc/apache2\n{% endhighlight %}</p>\n<p>We're going to set up 3 things:</p>\n<ol>\n<li>The SSL mod</li>\n<li>A cache mod</li>\n<li>The SSL configuration</li>\n</ol>\n<p>Inside <code>mods-available</code> will be <code>ssl.conf</code>, <code>ssl.load</code>, and <code>socache_shmcb.load</code>. If they do not exist in <code>mods-enabled</code>, you're going to link them.</p>\n<p>{% highlight shell-session %}\nsudo ln -s mods-available/ssl.conf mods-enabled/ssl.conf\nsudo ln -s mods-available/ssl.load mods-enabled/ssl.load\nsudo ln -s mods-available/socache<em>shmcb.load mods-enabled/socache</em>shmcb.load\n{% endhighlight %}</p>\n<p>That takes care of 1 and 2. Now we'll set up the SSL configuration.</p>\n<p>Let's assume you already have the non SSL configuration set up. If you don't go ahead and set that up, we'll make sure that it redirects to the SSL version below.</p>\n<p>Open the configuration file for the non SSL virtual host and enter the following:</p>\n<p>{% highlight apacheconf %}\n&#x3C;VirtualHost *:443>\nServerName your-server.com\nDocumentRoot /path/to/your-server\nSSLEngine on\nSSLCertificateFile /etc/letsencrypt/live/your-domain.com/cert.pem\nSSLCertificateKeyFile /etc/letsencrypt/live/your-domain.com/privkey.pem\nSSLCertificateChainFile /etc/letsencrypt/live/your-domain.com/chain.pem\n</VirtualHost>\n{% endhighlight %}</p>\n<p>Go ahead and verify your configuration (<code>service apache2 configtest</code>) or restart your web server, typically <code>service apache2 restart</code>. You should now be able to access your site over SSL!</p>\n<h2>Redirecting non-SSL to your new SSL site</h2>\n<p>In order to do this, you'll need to make sure you have the <code>rewerite</code> mod enabled. If you don't see it in <code>mods-enabled</code>, go ahead and link it:</p>\n<p>{% highlight shell-session %}\nln -s mods-available/rewrite.load mods-enabled/rewerite.load\n{% endhighlight %}</p>\n<p>In your site configuration, add the following lines:</p>\n<p>{% highlight apacheconf %}\nRewriteEngine On\nRewriteRule ^(.*)$ <a href=\"https://%25%7BHTTP_HOST%7D$1\">https://%{HTTP_HOST}$1</a> [R=301, L]\n{% endhighlight %}</p>\n<p>Voilla! You're now secured. Give a big thanks to the team and community over at <a href=\"https://twitter.com/letsencrypt\" title=\"Let's Encrypt\" target=\"_blank\">@LetsEncrypt</a> and on <a href=\"https://github.com/letsencrypt/letsencrypt\" title=\"Let's Encrypt on Github\" target=\"_blank\">GitHub</a>!</p>","frontmatter":{"date":"2015-12-04 00:32:00","permalink":"/blog/lets-encrypt-setup","title":"Setting up Let's Encrypt Certificates"}}},"pageContext":{}}