{"data":{"markdownRemark":{"html":"<p>Many of you are likely familiar with Pascal Precht's i18n localization library, <a href=\"https://github.com/angular-translate/angular-translate\" title=\"AngularJS i18n angular-translate module\" target=\"_blank\">angular-translate</a>. It's well made, easy to use, and has a lot of configuration as to how you want to prepare or load your localizations. The only thing it lacks, in my and others opinions, is one-time binding (issues <a href=\"https://github.com/angular-translate/angular-translate/issues/738\" target=\"_blank\">#738</a>, <a href=\"https://github.com/angular-translate/angular-translate/issues/967\" target=\"_blank\">#967</a>, <a href=\"https://github.com/angular-translate/angular-translate/issues/1018\" target=\"_blank\">#1018</a>, and <a href=\"https://github.com/angular-translate/angular-translate/issues/1043\" target=\"_blank\">#1043</a>). This becomes a problem if you asynchronously load your localization files, which is a beneficial tool to large angular applications. Pascal writes about how to <a href=\"https://github.com/angular-translate/angular-translate/wiki/Asynchronous-loading\" target=\"_blank\">asynchronously load your localization files</a>. We personally use <a href=\"https://github.com/angular-translate/bower-angular-translate-loader-static-files\" target=\"_blank\">angular-translate-loader-static-files</a>. While the cost of evaluating translation expressions is relatively inexpensive, we still preferred throwing a one-time binding on it, and since we were early on in the project, I figured we'd provide a solution that could also benefit others in the community.</p>\n<h2>translate-once Directive</h2>\n<p><a href=\"https://github.com/ajwhite/angular-translate-once\"><code class=\"language-text\">translate-once</code></a> adds support for one-time bindings for translations with a new <code class=\"language-text\">translate-once</code></a> directive. It extends the existing functionality of <code class=\"language-text\">angular-translate</code> and doesn't introduce any new dependencies. It is written to be considered an extension within the same namespace as <code class=\"language-text\">pascalprecht.translate</code>.</p>\n<p>{% highlight html %}\n<span translate-once=\"TRANSLATION_KEY\"></span>\n{% endhighlight %}</p>\n<p>Installation is done via bower, and if you already include the <code class=\"language-text\">pascalprecht.translate</code> module into your angular project, you'll be good to go.</p>\n<p>{% highlight sh %}\nbower install angular-translate-once\n{% endhighlight %}</p>\n<h2>Why do we need this?</h2>\n<p>There's no good way to perform one-time bindings when asynchronously loading your static localization assets. One-time bindings for translations are useful for any instances of static copy.</p>\n<ul>\n<li>Page titles</li>\n<li>Navigation elements</li>\n<li>Static bylines, paragraphs, explainers, etc</li>\n</ul>\n<p>Let's look at what is currently available in the <code class=\"language-text\">angular-translate</code> package.</p>\n<p>Use it as a <strong>filter</strong>\n{% highlight html %}\n{{ 'TRANSLATION_KEY' | translate }}\n{% endhighlight %}</p>\n<p>Use it as a <strong>directive</strong>\n{% highlight html %}\n<span translate=\"TRANSLATION_KEY\"></span>\n{% endhighlight %}</p>\n<p>Use it as a **directive with values **\n{% highlight html %}\n<span translate=\"TRANSLATION_KEY\" translate-values=\"{foo: 'bar'}\"></span>\n{% endhighlight %}</p>\n<p>Use it as a <strong>directive and compile</strong> elements formed from the translation\n{% highlight html %}\n<span translate=\"TRANSLATION_KEY\" translate-compile></span>\n{% endhighlight %}</p>\n<p>Or even use it in within javascript in one of two ways:</p>\n<p><strong>Asynchronously</strong>\n{% highlight javascript %}\n$translate('TRANSLATION_KEY').then(function (translation) {\nalert(translation);\n});\n{% endhighlight %}</p>\n<p><strong>Synchronously</strong>\n{% highlight javascript %}\nalert($translate.instant('TRANSLATION_KEY'));\n{% endhighlight %}</p>\n<h2>But what about one-time binding?</h2>\n<p>Let's first look at some approaches one might make with the current toolkit. Intuitively, one might try to do this in how a standard one-time binding would work after <a href=\"http://blog.thoughtram.io/angularjs/2014/10/14/exploring-angular-1.3-one-time-bindings.html\" title=\"AngularJS 1.3 one-time bindings\" target=\"_blank\">Angular 1.3 introduced one-time bindings</a>.</p>\n<p>{% highlight html %}\n<span ng-bind=\"{{:: 'TRANSLATION_KEY' | translate }}\"></span>\n{% endhighlight %}</p>\n<p>Your intuition would lead you to think that the output from this would be a span tag with the translation inside and question why I'm even here writing this post. Unfortunately, that is not the case if you asynchronously load your localization files, as many large applications do. You may be safe after your application has completed any deferred asset loading, but before then, your first page rendered will likely be missing all its one-time bound translations.</p>\n<p>First, let's understand how the filter works. The <code class=\"language-text\">translate</code> filter's <a href=\"https://github.com/angular-translate/angular-translate/blob/2.7.2/src/filter/translate.js#L65\" target=\"_blank\">definition</a> makes use of the <strong>synchronous</strong> lookup function, <code class=\"language-text\">$translate.instant</code>, as a filter is by design synchronous. That means <code class=\"language-text\">$translate.instant</code> is a hit-or-miss lookup, where if the localization is not loaded, it misses and does not return the translation since it doesn't exist. When you use the filter in a binding, it's going to process your string through <code class=\"language-text\">$translate.instant</code>. This works without one-time bindings because your expression is <strong>reevaluated each digest cycle</strong>, and if there's a change, it triggers the watchers to re-render the output. If <code class=\"language-text\">$translate.instant(&#39;TRANSLATION_KEY&#39;)</code> misses the first time, but hits a successive time, that value will have changed and the new value will be rendered to the view.</p>\n<p>When you introduce a one-time binding to the expression, your binding will only exist in the <code class=\"language-text\">$$watchers</code> once, and then you're done. That means you only get one chance to retrieve a data value to bind, and any successive digest loops will not trigger your update if that value changes (in this case, once the localization becomes loaded and returns the final translation value). So if <code class=\"language-text\">$translate.instant</code> misses the first time, that's the final value of your binding. You don't get a second chance to lookup the localization entry again to re render the correct value. It's dependent on the digest cycle.</p>\n<h2>How translate-once works</h2>\n<p><code class=\"language-text\">translate-once</code> makes use of the link function and the asynchronous resolver of <code class=\"language-text\">$translate()</code>. The directive's <a href=\"https://github.com/ajwhite/angular-translate-once/blob/v1.0.1/src/translate-once.js#L52-L69\" title=\"Angular one-time binding translate-once source code\" target=\"_blank\">link function</a> takes the translation key, looks it up asynchronously with <code class=\"language-text\">$translate()</code>, and once resolved, writes it to the element. Since the link function only fires once, when the element enters context, it is essentially one-time binding the translation. Of course, if it leaves and re-enters context, perhaps with an <code class=\"language-text\">ngIf</code> condition going from <code class=\"language-text\">false</code> and back to <code class=\"language-text\">true</code>.</p>\n<p>Let's look at how this works:</p>\n<p>{% highlight javascript %}\nfunction linker (scope, element, attrs) {\nvar translateValues = {};\nif (attrs.translateValues) {\ntranslateValues = $parse(attrs.translateValues)(scope);\n}</p>\n<p>  $translate(attrs.translateOnce, translateValues).then(function (translation) {\nelement.html(translation);\nif (attrs.hasOwnProperty('translateCompile')) {\n$compile(element.contents())(scope);\n}\n});\n}\n{% endhighlight %}</p>\n<p>The first thing that happens is a backward compatible step to ensure we expose existing functionality that <code class=\"language-text\">angular-translate</code> offers -- passing <code class=\"language-text\">translate-values</code> to be used in dynamic localization entries.</p>\n<p>{% highlight javascript %}\nif (attrs.translateValues) {\ntranslateValues = $parse(attrs.translateValues)(scope);\n}\n{% endhighlight %}</p>\n<p>We take the <code class=\"language-text\">translate-values</code> attributes, and <code class=\"language-text\">$parse</code> it on the shared scope. Note: the scope is not isolated, it is shared with the context the directive exists in, such that when we parse the values, they are parsed in the scope that the expression exists in.</p>\n<p>The second thing that happens is calling <code class=\"language-text\">$translate()</code>. This asynchronously looks up the localization entry, and once it is available, it resolves with the answer if the entry exists.</p>\n<p>{% highlight javascript %}\n$translate(attrs.translateOnce, translateValues).then(function .. );\n{% endhighlight %}</p>\n<p>We then take the translation value, and set it to the element's content.</p>\n<p>{% highlight javascript %}\nvar output = translation;\nif (attrs.hasOwnProperty('translateCompile')) {\noutput = $compile(translation)(scope);\n}\nelement.html(output);\n{% endhighlight %}</p>\n<p>If the consumer requests that we compile the translation value, as it may contain elements with other bindings, the attribute flag <code class=\"language-text\">translate-compile</code> can be provided and is used in a backward compatible manner. Then we process the translation through <code class=\"language-text\">$compile</code> with the shared scope.</p>\n<h2>More one-time binding tools</h2>\n<p>Just as you may want to set the content of an element to a translation value, many times you may want to do this for other attributes on an element, such as</p>\n<ul>\n<li>An <code class=\"language-text\">&lt;input /&gt;</code> element's <code class=\"language-text\">value</code></li>\n<li>An <code class=\"language-text\">&lt;input /&gt;</code> text field <code class=\"language-text\">placeholder</code></li>\n<li>An <code class=\"language-text\">&lt;a /&gt;</code> element's <code class=\"language-text\">title</code> attribute</li>\n<li>An <code class=\"language-text\">&lt;img /&gt;</code> element's <code class=\"language-text\">alt</code> attribute</li>\n<li>etc..</li>\n</ul>\n<p>A similar process takes place for <a href=\"https://github.com/ajwhite/angular-translate-once/blob/v1.0.1/src/translate-once.js#L29-L40\" title=\"AngularJS translate-once source code for one-time binding attributes\" target=\"_blank\">one-time binding an element's properties</a>. The following attribute directives can be used:</p>\n<ul>\n<li><code class=\"language-text\">translate-once-value</code></li>\n<li><code class=\"language-text\">translate-once-placeholder</code></li>\n<li><code class=\"language-text\">translate-once-title</code></li>\n<li><code class=\"language-text\">translate-once-alt</code></li>\n</ul>\n<p>The same process takes place as when using <code class=\"language-text\">translate-once</code>, the only difference is that once <code class=\"language-text\">$tranlsate()</code> resolves, it updates the element's corresponding attribute. So if we do <code class=\"language-text\">translate-once-placeholder=&quot;TRANSLATION_KEY&quot;</code>, <code class=\"language-text\">&lt;input placeholder=&quot;translation value&quot; /&gt;</code> will be rendered in the end.</p>\n<h2>Contributing</h2>\n<p>As always, I welcome anyone to contribute a pull request over on the <a href=\"https://github.com/ajwhite/angular-translate-once\" title=\"translate-once github repository\" target=\"_blank\">Github repo</a>. Please make sure that tests are written for any changes or additions made.</p>","frontmatter":{"date":"2015-06-02 12:00:00","permalink":"/blog/angularjs-translate-once-angular-translate-one-time-binding","title":"AngularJS translate-once extension for angular-translate one-time binding support"}}},"pageContext":{}}