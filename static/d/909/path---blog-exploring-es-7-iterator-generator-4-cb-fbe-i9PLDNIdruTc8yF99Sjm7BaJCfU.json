{"data":{"markdownRemark":{"html":"<p>When I first heard of ES7 generators, it took me a couple cycles of reading to understand the idea behind them. Once you have that \"ah Ha!\" moment, you can see all the things you could potentially do with them. I always it helpful to relate something new to something you already understand, so let's see how we can use generators to solve problems that we face today.</p>\n<h2>What is a generator?</h2>\n<p>A generator is basically a function with a different type of <code>return</code>. Instead of returning values, it <em>produces</em>, or <em>yeilds</em> a value whenever <code>next()</code> is called. A generator's code block runs until the first <code>yield</code> line. That line only gets executed when <code>next()</code> is called. When <code>next()</code> is called, whatever value is yielded is given to next and the code continues to run until the next <code>yeild</code> is reached, or otherwise completes. When you call a generator, it returns you an <em>instance</em> of the generator, similar to how you might call <code>new FunctionName()</code>.</p>\n<p>For example, this will <code>yield</code> two values, <code>a</code> and then <code>b</code>, and then it will be done:\n{% highlight javascript %}\nfunction* example() {\nyield 'a';\nyield 'b';\n}</p>\n<p>var instance = example();\nconsole.log(instance.next()) // {value: 'a', done: false}\nconsole.log(instance.next()) // {value: 'b', done: false}\nconsole.log(instance.next()) // {value: undefined, done: true}\n{% endhighlight %}</p>\n<p>In other examples, you can <code>yield</code> inside a loop. In the example below, we have a generator that produces an identifier. Since the <code>yield</code> lives in an infinite loop, it will always produce a <code>next()</code> value.</p>\n<p>{% highlight javascript%}\nfunction* idGenerator() {\nvar id = 0;\nwhile (true) {\nyield ++id;\n}\n}\n{% endhighlight %}</p>\n<p>There's 2 important things to recognize about how this is written, and one important thing to understand.</p>\n<ol>\n<li>We define a generator with a <code>*</code>, <code>function*</code></li>\n<li>We <code>yield</code> the result, this will be returned whenever we call <code>next()</code> on the generator. This is like <code>return</code>, except a generator doesn't exactly return a value when you call it, it returns a \"new\" instance of the generator, which we will describe in 3.</li>\n<li>The scope of the generator, where <code>id</code> starts at <code>0</code>, is retained and doesn't \"end\". If this were a typical function, we'd get the next value up from <code>0</code>, which would be <code>1</code>. The next time we call it, we'd get the same thing, since <code>id</code> is initialized inside the scope of the function.</li>\n</ol>\n<p>I want us to understand point 3. When you create a generator, it returns to you an <em>instance</em> of that generator, which will retain the scope. Let's look at how this will behave:</p>\n<p>{% highlight javascript%}\nvar generatorInstance = idGenerator();\nconsole.log(generatorInstance.next()) // {value: 1, done: false}\nconsole.log(generatorInstance.next()) // {value: 2, done: false}\nconsole.log(generatorInstance.next()) // {value: 3, done: false}\n// to infinity and beyond\n{% endhighlight %}</p>\n<h2>Creating an interable interface to an array.</h2>\n<p>In other languages, such as Java, lists can generate iterable interfaces, such as, <code>(List) myList.iterator()</code>. With ES6, we can do the same thing.</p>\n<p>{% highlight javascript%}\nfunction* iterable(list) {\nvar index = 0;\nwhile (index &#x3C; list.length) {\nyield list[index++];\n}\n}\n{% endhighlight %}</p>\n<p>This will provide a similar iterator interface that you'd expect from other languages.</p>\n<p>{% highlight javascript%}\nvar list = ['a', 'b', 'c', 'd', 'e'];\nvar iterator = iterable(list);</p>\n<p>var item;\nwhile (!(item = iterator.next()).done) {\nconsole.log(item.value);\n}\n{% endhighlight %}</p>\n<p>This example is used from <a href=\"https://github.com/ajwhite/iterator-generator\" target=\"_blank\" title=\"Iterator Generator\">iterator-generator</a>.</p>","frontmatter":{"date":"2015-12-27 14:10:00","permalink":"/blog/exploring-es7-iterator-generator","title":"Exploring ES2015 - Creating an iterator with Generators"}}},"pageContext":{}}