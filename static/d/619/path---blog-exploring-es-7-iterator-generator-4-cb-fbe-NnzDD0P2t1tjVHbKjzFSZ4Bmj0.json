{"data":{"markdownRemark":{"html":"<p>When I first heard of ES7 generators, it took me a couple cycles of reading to understand the idea behind them. Once you have that \"ah Ha!\" moment, you can see all the things you could potentially do with them. I always it helpful to relate something new to something you already understand, so let's see how we can use generators to solve problems that we face today.</p>\n<h2>What is a generator?</h2>\n<p>A generator is basically a function with a different type of <code class=\"language-text\">return</code>. Instead of returning values, it <em>produces</em>, or <em>yeilds</em> a value whenever <code class=\"language-text\">next()</code> is called. A generator's code block runs until the first <code class=\"language-text\">yield</code> line. That line only gets executed when <code class=\"language-text\">next()</code> is called. When <code class=\"language-text\">next()</code> is called, whatever value is yielded is given to next and the code continues to run until the next <code class=\"language-text\">yeild</code> is reached, or otherwise completes. When you call a generator, it returns you an <em>instance</em> of the generator, similar to how you might call <code class=\"language-text\">new FunctionName()</code>.</p>\n<p>For example, this will <code class=\"language-text\">yield</code> two values, <code class=\"language-text\">a</code> and then <code class=\"language-text\">b</code>, and then it will be done:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 'a', done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 'b', done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: undefined, done: true}</span></code></pre></div>\n<p>In other examples, you can <code class=\"language-text\">yield</code> inside a loop. In the example below, we have a generator that produces an identifier. Since the <code class=\"language-text\">yield</code> lives in an infinite loop, it will always produce a <code class=\"language-text\">next()</code> value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">idGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token operator\">++</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There's 2 important things to recognize about how this is written, and one important thing to understand.</p>\n<ol>\n<li>We define a generator with a <code class=\"language-text\">*</code>, <code class=\"language-text\">function*</code></li>\n<li>We <code class=\"language-text\">yield</code> the result, this will be returned whenever we call <code class=\"language-text\">next()</code> on the generator. This is like <code class=\"language-text\">return</code>, except a generator doesn't exactly return a value when you call it, it returns a \"new\" instance of the generator, which we will describe in 3.</li>\n<li>The scope of the generator, where <code class=\"language-text\">id</code> starts at <code class=\"language-text\">0</code>, is retained and doesn't \"end\". If this were a typical function, we'd get the next value up from <code class=\"language-text\">0</code>, which would be <code class=\"language-text\">1</code>. The next time we call it, we'd get the same thing, since <code class=\"language-text\">id</code> is initialized inside the scope of the function.</li>\n</ol>\n<p>I want us to understand point 3. When you create a generator, it returns to you an <em>instance</em> of that generator, which will retain the scope. Let's look at how this will behave:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> generatorInstance <span class=\"token operator\">=</span> <span class=\"token function\">idGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generatorInstance<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 1, done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generatorInstance<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 2, done: false}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generatorInstance<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {value: 3, done: false}</span>\n<span class=\"token comment\">// to infinity and beyond</span></code></pre></div>\n<h2>Creating an interable interface to an array.</h2>\n<p>In other languages, such as Java, lists can generate iterable interfaces, such as, <code class=\"language-text\">(List) myList.iterator()</code>. With ES6, we can do the same thing.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">iterable</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> list<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will provide a similar iterator interface that you'd expect from other languages.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">iterable</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example is used from <a href=\"https://github.com/ajwhite/iterator-generator\" target=\"_blank\" title=\"Iterator Generator\">iterator-generator</a>.</p>","frontmatter":{"date":"2015-12-27 14:10:00","permalink":"/blog/exploring-es7-iterator-generator","title":"Exploring ES2015 - Creating an iterator with Generators"}}},"pageContext":{}}