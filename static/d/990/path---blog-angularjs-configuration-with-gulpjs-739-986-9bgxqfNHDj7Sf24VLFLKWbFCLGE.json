{"data":{"markdownRemark":{"html":"<p>If you're building an Angular application, your application is probably dependent on the proper environment. When working locally, you need to access a local set of services, when in production mode, you need your production set of services. Nothing new here. But what is new is a GulpJS task plugin I've been working on, <a title=\"AngularJS configuration generator gulp-ng-config by Atticus White\" href=\"https://npmjs.org/package/gulp-ng-config\" target=\"_blank\">gulp-ng-config</a>, that will build your environment configuration as specified by your build task.</p>\n<p>Let's assume we have a simple AngularJS application that uses some <a title=\"AngularJS $resource\" href=\"https://docs.angularjs.org/api/ngResource/service/$resource\" target=\"_blank\">$resources</a>. In this, very poor example, we set the configuration on the rootScope for the location of our API. Our NoteService, which is the factory for our $resource, uses this as the configured location of the API.</p>\n<p>{% highlight javascript %}\nangular.module('myApp', ['ngResource'])\n.run(['$rootScope', function myApp ($rootScope) {\n$rootScope.baseUrl = 'https://mywebserver.com/api';\n}]);</p>\n<p>angular.module('myApp').factory('NoteService', ['$resource',\nfunction NoteService ($resource) {\nreturn $resource($rootScope.baseUrl + '/notes/:id');\n}\n]);\n{% endhighlight %}</p>\n<p>As we see here, or even if we tried this with a number of different examples, we're leaving our API's URL in our code, which like any configuration, isn't exactly how you want things set up. A better scenario would be if we had a service holding our configuration. That's one step in the right direction:</p>\n<p>{% highlight javascript %}\nangular.module('myApp.config', [])\n.constant('EnvironmentConfig', {\nbaseUrl: '<a href=\"http://mywebserver.com/api\">http://mywebserver.com/api</a>'\n});</p>\n<p>angular.module('myApp', ['ngResource', 'myApp.config']);\nangular.module('myApp').factory('NoteService', ['$resource', 'EnvironmentConfig',\nfunction NoteService ($resource, EnvironmentConfig) {\nreturn $resource(EnvironmentConfig.baseUrl + '/notes/:id');\n}\n]);\n{% endhighlight %}</p>\n<p>But how do we get here without that being hard-coded into our project? By using a JSON file, one for each of our environments (there will be improvements to this approach upcoming), we can generate this configuration component as a build task.</p>\n<p>Let's look at the following configuration file:</p>\n<p>{% highlight json %}\n{\n\"EnvironmentConfig\": {\n\"environment\": \"local\",\n\"baseUrl\": \"<a href=\"http://localhost:8080/api%22\">http://localhost:8080/api\"</a>,\n\"somethingElse\": {\n\"property\": \"value\"\n}\n}\n}\n{% endhighlight %}</p>\n<p>We can construct a build task using <a title=\"AngularJS configuration generator gulp-ng-config by Atticus White\" href=\"https://npmjs.org/package/gulp-ng-config\" target=\"_blank\">gulp-ng-config</a> to use this JSON file as the source of the stream, and output on the other end the Angular module containing the constant.</p>\n<p>{% highlight javascript %}\nvar gulp = require('gulp'),\ngulpNgConfig = require('gulp-ng-config');</p>\n<p>gulp.task('configuration', function () {\ngulp.src('config.json')\n.pipe(gulpNgConfig('myApp.config'))\n.pipe(gulp.dest('app/'));\n});\n{% endhighlight %}</p>\n<p>And that will produce:</p>\n<p>{% highlight javascript %}\nangular.module('myApp.config', [])\n.constant('EnvironmentConfig', {\nenvironment: 'local',\nbaseUrl: '<a href=\"http://mywebserver.com/api&#x27;\">http://mywebserver.com/api'</a>,\nsomethingElse: {\nproperty: 'value'\n}\n});\n{% endhighlight %}</p>\n<p>Since this ends up in the project directory, we can have our angular project include the file and our main application can now use it as a dependency.</p>\n<p>If you'd like to use this GulpJS component, it's a simple <code>npm install gulp-ng-config</code>. You can always contribute or open issues at <a title=\"Atticus' Github repository for gulp-ng-config\" href=\"https://github.com/ajwhite/gulp-ng-config\" target=\"_blank\">https://github.com/ajwhite/gulp-ng-config</a></p>","frontmatter":{"date":"2014-10-10 00:26:00","permalink":"/blog/angularjs-configuration-with-gulpjs","title":"Using GulpJS to Generate Environment Configuration Modules"}}},"pageContext":{}}