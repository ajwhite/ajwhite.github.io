{"data":{"markdownRemark":{"html":"<p>I recently ported my site from WordPress to Jekyll and couldn't be happier. I have a fantastic new portable toolset that feels more suitable and maintainable for myself as a developer. The only missing piece felt like automated deployments. I was still <code>ssh</code>ing into my server, pulling down my repo, and running my build tasks. This felt wrong compared to what we do at <a href=\"https://robinpowered.com\" title=\"Meeting room booking system made easy - Robin\" target=\"_blank\">Robin Powered</a> with <a href=\"https://travis-ci.org/\" title=\"Test and Deploy your code with confidence\" target=\"_blank\">Travis Continuous Integrations</a> and <a href=\"http://capistranorb.com/\" title=\"Remote multi-server automation tool\" target=\"_blank\">Capistrano</a> to continuously release our applications in an automated way when we merge into <code>master</code>.</p>\n<p>First, I didn't want to use Capistrano. I use it at work, and being a JS person and not a Ruby person, I didn't feel at home with it. It was something I could tweak if I needed to change parts of my deployment process, but to start from scratch I was ready to try something new and more familiar to me. Something where my question is \"what would I like to do with this?\", rather than \"how can I do it with this?\".</p>\n<h2>F*ck it, ShipIt</h2>\n<p>This is when I discovered <a href=\"https://github.com/shipitjs/shipit\" title=\"Shipit - An automation engine and deployment tool written for NodeJS\" target=\"_blank\">Shipit</a>. For the sake of this article, I'm going to assume you already know what Shipit is. If you don't, you can read <a href=\"/blog/shipit\" title=\"Exploring Shipit\">my other post about how Shipit works</a>. As I'm using shipit for my deployments, I've incorporated the <a href=\"https://github.com/shipitjs/shipit-deploy\" title=\"Shipit deployment automation\" target=\"_blank\">shipit-deploy</a> module, which facilitates the release process.</p>\n<p>The next thing I need is a continuous integration build server. I use <a href=\"https://travis-ci.org/\" title=\"Travis continuous integration server\" target=\"_blank\">TravisCI</a> at work, but the free plan doesn't allow for any private configurations. As I want to continuously deploy to my personal server, I need a place to hide environment variables or private SSH keys. This is when I turned to <a href=\"https://circleci.com/\" title=\"Circle continuous integraiton server\" target=\"_blank\">CircleCI</a>. They allow their public containers to store private information, which was exactly what I needed. They also have a great interface with a grouped and collapsable regions representing different steps in your build:</p>\n<img src=\"/dist/images/blog/jekyll-continuous-delivery/circle.png\" alt=\"CircleCI build summary\" />\n<p>You can also find that exact build <a href=\"https://circleci.com/gh/ajwhite/jekyll-portfolio/59\" title=\"CircleCI build summary\" target=\"_blank\">here</a>.</p>\n<p>I decided I want most of my building done on my CI server -- minimizing sources, building the static site, etc. If you think about it, there's not a compelling reason that I should duplicate this work on my server. The CI server already builds the project in production mode to verify and test everything; I'd rather take that build and <em>push</em> it to my server instead.</p>\n<p>This is what CircleCI will be doing:</p>\n<ul>\n<li>installing dependencies (bower, npm, gem)</li>\n<li>building sources (concatenating bower_component dependencies, concatenating site scripts)</li>\n<li>optimizing sources (minimizing sources, optimizing images)</li>\n<li>building the static site (<code>jekyll build</code>)</li>\n<li>test the build (validate links, etc)</li>\n<li>deploying the static build to my server</li>\n</ul>\n<h2>Shipitfile</h2>\n<p><code>shipit</code> will be taking care of the last step: deploying the static build to my server. Let's take a look at what <a href=\"https://github.com/ajwhite/jekyll-portfolio/blob/master/shipitfile.js\" title=\"atticuswhite.com shipit file\" target=\"_blank\">shipitfile</a> looks like:</p>\n<p>{% highlight javascript %}\nvar path = require('path');</p>\n<p>module.exports = function (shipit) {\nrequire('shipit-deploy')(shipit);</p>\n<p>  shipit.initConfig({\ndefault: {\nworkspace: '/tmp/jekyll-portfolio',\nrepositoryUrl: '<a href=\"https://github.com/ajwhite/jekyll-portfolio.git&#x27;\">https://github.com/ajwhite/jekyll-portfolio.git'</a>,\nignore: ['.git', 'node_modules'],\nkeepReleases: 5,\ndeleteOnRollback: false,\nshallowClone: true,\n},\nproduction: {\nservers: 'deploy.atticuswhite.com',\ndeployTo: '/var/www/atticuswhite/jekyll-portfolio'\n},\ndevelop: {\nservers: 'deploy.atticuswhite.com',\ndeployTo: '/var/www/atticuswhite/dev.jekyll-portfolio'\n}\n});</p>\n<p>  shipit.on('updated', function () {\nvar buildDirectory = path.resolve('./public/');\nshipit.remoteCopy(buildDirectory, shipit.releasePath);\n});\n};\n{% endhighlight %}</p>\n<p><code>shipit.initConfig</code> is pretty basic -- we define</p>\n<ul>\n<li><code>workspace</code>: where inside the container (on the CI server) to prepare the release</li>\n<li><code>repositoryUrl</code>: the project to use</li>\n<li><code>ignore</code>: things to ignore when releasing</li>\n<li><code>keepReleases</code>: how many historical releases to keep before removing older ones</li>\n<li><code>deleteOnRollback</code>: if the release should be deleted when rolled back</li>\n<li><code>shallowClone</code>: clone behavior of git, basically <code>--depth 1</code></li>\n</ul>\n<p>The important part of the <code>shipitfile</code> is the <code>on updated</code> listener:</p>\n<p>{% highlight javascript %}\nshipit.on('updated', function () {\nvar buildDirectory = path.resolve('./public/');\nshipit.remoteCopy(buildDirectory, shipit.releasePath);\n});\n{% endhighlight %}</p>\n<p>As mentioned previously, I don't want to run the entire build on my server. We've already built it on the CI server, and we're deploying a static site, so there's no migrations or other moving parts I need to take care of. I can just move my built project over to the production server.</p>\n<p><code>shipit.remoteCopy</code> will perform an <code>rsync</code> from the CI container to my production server. It takes the <code>/public</code> directory on the container, where the built static site is, and <code>rsync</code>s it to the release path created by <code>shipit-deploy</code>.</p>\n<p>When this build completes, the generated static site has been uploaded to the release path, and <code>shipit-deploy</code> finishes up by rotating the latest release to be the <code>current</code>, and now my site is live.</p>\n<h2>Displaying the build number on the site</h2>\n<p>To wrap things up, I thought it would be neat to see the build number on my site, along with the deployed commit <code>SHA</code>.</p>\n<p>It's pretty simple, just a byline with a link to the Circle build. You can also just look in the footer of this blog and you'll see it.</p>\n<img src=\"/dist/images/blog/jekyll-continuous-delivery/build-number.png\" alt=\"Atticuswhite.com website build number\" />\n<p>CircleCI, like Travis and other CI integrations, <a href=\"https://circleci.com/docs/environment-variables\" title=\"CircleCI Environment variable documentation\" target=\"_blank\">offers environment variables</a> that describe the build and the container. We'll be using</p>\n<ul>\n<li><code>CIRCLE_SHA1</code> - The <code>SHA1</code> of the commit being tested</li>\n<li><code>CIRCLE_BUILD_NUM</code> - The build number</li>\n</ul>\n<p>This, as I found, had a couple of challenges in it. At first, I thought I could simply use <a href=\"http://jekyllrb.com/docs/configuration/#specifying-a-jekyll-environment-at-build-time\" title=\"Jekyll environment configuration\" target=\"_blank\">Jekyll environment</a>, but that's only to define a name for the environment, not accessing an object of environment variables. To do this, I had to add a plugin, <a href=\"https://github.com/ajwhite/jekyll-environment-variables\" title=\"Jekyll environment variables generator plugin\">jekyll-environment-variables</a>, that would take environment variables and add them to the site:</p>\n<p>{% highlight rb %}\nmodule Jekyll\nclass EnvironmentVariablesGenerator &#x3C; Generator\ndef generate(site)\nsite.config['circle_sha'] = ENV['CIRCLE_SHA']\nsite.config['circle<em>build</em>number'] = ENV['CIRCLE<em>BUILD</em>NUM']\nend\nend\nend\n{% endhighlight %}</p>\n<h2>Putting it all together</h2>\n<p>After reading this, you should be able to set something similar up fairly quick. To summarize:</p>\n<ol>\n<li>Run a build on CircleCI (or another CI server)</li>\n<li>Configure <code>shipit</code> against a web server</li>\n<li>Configure an <code>rsync</code> of your build directory containing the final static site to a directory on your web server</li>\n<li>Merge that branch into <code>master</code>!</li>\n</ol>","frontmatter":{"date":"2015-11-05 09:00:00","permalink":"/blog/continuous-deployment-jekyll-circleci-shipit","title":"Continuously deploying Jekyll with CircleCI and ShipIt"}}},"pageContext":{}}